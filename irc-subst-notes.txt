Now, the factoids are available as macros... so now we can get rid
of the factoid stuff, because now everything is a macro.

Idea: to have macro calls in other macro values.

idea: while writing the (( ... )) thing, have a stack that would allow
... (( ... (( ... )) ... )) (meaning (( ... )) -inside- another (( ... )))

idea: while debugging the (( ... )) thing, have another list of stored stacks,
and have (say) a ! character signal when to save the stack into the list.
So, when the line has (say) (( ! )), the stack would be saved in the list after
the item involving the (( was pushed, and before the )) took the item off the
stack.

Then, have commands that display that list.

idea: improve macro system by making macros that take params, so:
  ((foo bar baz))
would take bar and baz as strings, and "apply" the macro foo to them

some experiments:

re.split(r'(\(\(|\)\))', 'foo((bar((baz))quux))biff))zazz') returns:
  ['foo', '((', 'bar', '((', 'baz', '))', 'quux', '))', 'biff', '))', 'zazz']
which is just what I'd want for now.

and, re.split(r'(\(\(|\)\)|\ )', 'foo((ba r((ba z))qu uxbi ff))za zz')
returns:
  [
    'foo',
    '((',
      'ba', ' ', 'r',
      '((',
        'ba', ' ', 'z',
      '))',
      'qu', ' ', 'uxbi', ' ', 'ff',
    '))', 'za', ' ', 'zz'
  ]

energiser suggests:

<energizer> jim: is this for an sql system, or something more general?
<energizer> jim: if it's a general string templating system you might
               want to use something like jinja2

<energizer> jim: for sql, there are pugsql, dbt, sqlalchemy

<energizer> jim: for fancy string transformations, there is pyparsing and lark



idea: try to match existing commands, otherwise "say" the thing that was tried

# connect to remote with passwd:
conn = psycopg2.connect("dbname=jim user=jim host=orie password=pass")

class KeywordList(Object):
    def __init__(self, properties):
        self.string = ""
        self.properties = properties

    def __repr__(self):
        reslist = []

        for key in self.properties:
            reslist.append(key + "=" + self.properties[key]

        return " ".join(reslist)

    def attachProp(self, prop, value):
        self.properties[prop] = value

# refactored db opener
    def opendb(self):
        self.db = {}
        self.db["dbname"] = "jim"
        self.db["user"] = "jim"
        self.db["host"] = "orie"
        self.db["password"] = ".X1iplay"



def connectString(db):
    result = ""

    if db.__contains__("dbname") and db.__contains__("user"):
        dbname = attachProp(db, "dbname")
        user =  attachProp(db, "user")

        if db.
    else:
        # error, malformed db

# TODO for private msg and channel msg:
#      -
#      - store hostmask and nick somewhere (db?)
#      - get user's account name (where is this stored already?
#                                 would like to get it from that
#                                 rather than bother the server about it

irc_subst::__init__() calls irc_subst::doReload(), and this dependency
at least affects debugPrint(), and there might be problems based on
exactly when the DebugTabObj is created, so look this over and maybe
adjust.
